{
    "openapi": "3.0.0",
    "info": {
        "title": "API Documentation for LIWACH system",
        "description": "API Documentation for LIWACH system",
        "contact": {
            "email": "edenabdisa90@yahoo.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://project.test/api/v1",
            "description": "Demo API Server"
        }
    ],
    "paths": {
        "/address": {
            "get": {
                "tags": [
                    "Address"
                ],
                "summary": "Get list of address",
                "description": "Returns list of address",
                "operationId": "getProjectsList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "post": {
                "tags": [
                    "Address"
                ],
                "summary": "Store new project",
                "description": "Returns project data",
                "operationId": "storeProject",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreProjectRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/address/{id}": {
            "get": {
                "tags": [
                    "Address"
                ],
                "summary": "Get project information",
                "description": "Returns project data",
                "operationId": "getProjectById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "put": {
                "tags": [
                    "Address"
                ],
                "summary": "Update existing project",
                "description": "Returns updated project data",
                "operationId": "updateProject",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProjectRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Address"
                ],
                "summary": "Delete existing project",
                "description": "Deletes a record and returns no content",
                "operationId": "deleteProject",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Address": {
                "title": "Address",
                "description": "Address model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "country": {
                        "title": "Country",
                        "description": "Country name",
                        "type": "string",
                        "example": "Ethiopia"
                    },
                    "city": {
                        "title": "City",
                        "description": "City name",
                        "type": "string",
                        "example": "Addis Ababa"
                    },
                    "subcity": {
                        "title": "Subcity",
                        "description": "Subcity",
                        "type": "string", 
                        "example": "Yeka"
                    },
                    "district": {
                        "title": "District",
                        "description": "This the area name",
                        "type": "string", 
                        "example": "Summit, 4kilo"
                    },
                    "landmark": {
                        "title": "Landmark",
                        "description": "This is a famous lanmark name around the area",
                        "type": "string",
                        "example": "Firdebet, Next to the parlament, Adwa adebaby"
                    },
                    "api": {
                        "title": "Api",
                        "description": "This is the exact location api link",
                        "type": "text", 
                        "example": "https://google.maps/dhjsdbshf"
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            },
            "Category": {
                "title": "Category",
                "description": "Category model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "title": "Category name",
                        "description": "Category name",
                        "type": "string", 
                        "example": "Garments, Mens"
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Category"
                }
            },
            "Flag": {
                "title": "Flag",
                "description": "Flag items",
                "required": [
                    "name"
                ],
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "reason": {
                        "title": "Reason",
                        "description": "Report name fetched from report type",
                        "type": "string",
                        "example": "Fake Item"
                    },
                    "flagged_item_id": {
                        "title": "Flagged Item Id",
                        "description": "The Id of the item that was flagged",
                        "type": "big integer",
                        "example": 2
                    },
                    "flagged_by_id": {
                        "title": "Flagged by Id",
                        "description": "The Id of the user that flagged the item",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "type": {
                        "title": "Type",
                        "description": "Is the flagged item service or item it will make it easier for the backend to choose which table to query",
                        "type": "string",
                        "example": "item or service"
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            },
            "Item": {
                "title": "Item",
                "description": "Item model ",
                "required": [
                    "name"
                ],
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "picture": {
                        "title": "Picture file name",
                        "description": "This name will be concated with the image collection folder",
                        "type": "string",
                        "example": "mybag.jpg"
                    },
                    "status": {
                        "title": "status",
                        "description": "Status of the item whether it is bartered,unbartered,blocked. Automatically all user item are set to unbartered but company is set to blocked",
                        "type": "string",
                        "example": "bartered,unbartered,blocked"
                    },
                    "number_of_flag": {
                        "title": "Number of Flag",
                        "description": "Keeps count of the flag that this item recieved",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "number_of_request": {
                        "title": "Number of request",
                        "description": "Keeps count of the request that this item recieved",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "bartering_location_id": {
                        "title": "Bartering location",
                        "description": "After saving the location at address the id will be assocated with this item",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "type_id": {
                        "title": "Type",
                        "description": "Categorize the item into a type and from this type we can decide the category",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            },
            "Membership": {
                "title": "Membership",
                "description": "Membership model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "title": "Name",
                        "description": "Name of the membership",
                        "type": "string",
                        "example": "normal,premium,gold"
                    },
                    "limit_of_post": {
                        "title": "Limit of post",
                        "description": "Limit of post that this memebrship is allowed",
                        "type": "integer",
                        "example": 100
                    },
                    "transaction_limit": {
                        "title": "Transation Limit",
                        "description": "Transation Limit in a day or in a week",
                        "type": "integer",
                        "example": 6
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            },
            "Message": {
                "title": "Messages",
                "description": "Message model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "content": {
                        "title": "Text Content",
                        "description": "The text message",
                        "type": "string",
                        "example": "Hello, I want this item"
                    },
                    "type": {
                        "title": "Type",
                        "description": "It identified if the content is text or an image path",
                        "type": "string",
                        "example": "text or picture"
                    },
                    "chat_id": {
                        "title": "Chat Id",
                        "description": "The token gotten when the item was requested. Identifies the chat ID(token in company case) two user may have many chat id if they are bartering many item between them",
                        "type": "string", 
                        "example": "randomcreateduniquetoken"
                    },
                    "sender_id": {
                        "title": "Sender user id",
                        "description": "Sender user id",
                        "type": "big integer", 
                        "example": 4
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            },
            "ReportType": {
                "title": "ReportType",
                "description": "Report type model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "report_detail": {
                        "title": "Name",
                        "description": "Small text that will be displayed to user so that they can choose from the list",
                        "type": "string",
                        "example": "Spam, Fake Item, Violence, Child Abuse, Other, "
                    },
                    "type_for": {
                        "title": "Type for",
                        "description": "The item that this report can be associated with",
                        "type": "string",
                        "example": "item or service or user"
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            },
            "Request": {
                "title": "Request",
                "description": "Request model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "status": {
                        "title": "Status",
                        "description": "Whether the user has accepted it or not",
                        "type": "string",
                        "example": "accepted or declined or expired"
                    },
                    "requester_id": {
                        "title": "Requester User Id",
                        "description": "The ID of the person who requested for the item",
                        "type": "integer",
                        "example": 4
                    },
                    "requested_item_id": {
                        "title": "Requested Item Id",
                        "description": "The ID of the Item that we wanted",
                        "type": "integer",
                        "example": 7
                    },
                    "requester_item_id": {
                        "title": "Requester Item Id",
                        "description": "The ID of the Item that we are offering",
                        "type": "integer",
                        "example": "2020-01-27 17:50:45"
                    },
                    "rating": {
                        "title": "Rating",
                        "description": "The rating given by the user after the status is changed to barter",
                        "type": "integer",
                        "example": 2
                    },
                    "token": {
                        "title": "Token",
                        "description": "A unique generated token that will be accessed by chat_id in case of user to user barter and can be used as ticket for organization.",
                        "type": "string", 
                        "example": "srrwgwrgt"
                    },
                    "type": {
                        "title": "type",
                        "description": "Type of items that are being exchanged. This will make it easy to decide on which table to query,",
                        "type": "integer",
                        "format": "int64",
                        "example": 9
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            },
            "Service": {
                "title": "Service",
                "description": "Service model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "title": "Name",
                        "description": "Name of the service",
                        "type": "string",
                        "example": "Plumbering"
                    },
                    "picture": {
                        "title": "Picture file name",
                        "description": "This name will be concated with the image collection folder",
                        "type": "string",
                        "example": "mybag.jpg"
                    },
                    "status": {
                        "title": "Status",
                        "description": "Describes if the bartering offer is bartred and open. For case where user select to reopen this the status can be changed to open unlike item",
                        "type": "string",
                        "example": "bartered or bartered or blocked"
                    },
                    "number_of_flag": {
                        "title": "Number of Flag",
                        "description": "Keeps count of the flag that this service recieved",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "number_of_request": {
                        "title": "Number of request",
                        "description": "Keeps count of the request that this service recieved",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "bartering_location_id": {
                        "title": "Bartering location",
                        "description": "After saving the location at address the id will be assocated with this service",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "type_id": {
                        "title": "Type",
                        "description": "Categorize the service into a type and from this type we can decide the category",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Project"
                }
            },
            "Type": {
                "title": "Type",
                "description": "Type model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "title": "Name",
                        "description": "Name of the new project",
                        "type": "string",
                        "example": "A nice project"
                    },
                    "category_id": {
                        "title": "Category ID",
                        "description": "This type is under a certain category.",
                        "type": "big integer",
                        "example": 123
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            },
            "User": {
                "title": "User",
                "description": "User model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "first_name": {
                        "title": "Last Name",
                        "description": "The first Name",
                        "type": "string",
                        "example": "Eden "
                    },
                    "last_name": {
                        "title": "Last Name",
                        "description": "The last Name",
                        "type": "string",
                        "example": "Abdisa "
                    },
                    "email": {
                        "title": "Email",
                        "description": "Email",
                        "type": "string",
                        "format": "eden@yahoo.com"
                    },
                    "profile_picture": {
                        "title": "Picture file name",
                        "description": "This name will be concated with the image collection folder",
                        "type": "string",
                        "example": "myprofile.jpg"
                    },
                    "phone_number": {
                        "title": "Phone Number",
                        "description": "Phone number including country/city code",
                        "type": "string", 
                        "example": "+2519443322"
                    },
                    "TIN_picture": {
                        "title": "Picture file name",
                        "description": "This name will be concated with the image collection folder and the tin number will be viewed by the admin to approve the user",
                        "type": "string",
                        "example": "mytin.jpg"
                    },
                    "status": {
                        "title": "Status",
                        "description": "The user is active at first for user and blocked for company",
                        "type": "string",
                        "example": "active or blocked"
                    },
                    "birthdate": {
                        "title": "Birthdate",
                        "description": "The birthdate of the user",
                        "type": "string",
                        "format": "date",
                        "example":"2020-01-27"
                    },
                    "type": {
                        "title": "Type of user",
                        "description": "This name will be concated with the image collection folder",
                        "type": "string",
                        "example": "user or admin or company"
                    },
                    
                    "address_id": {
                        "title": "Address ID",
                        "description": "The ID of the address",
                        "type": "big integer",
                        "format": 99
                    },
                    "membership_id": {
                        "title": "Membership ID ",
                        "description": "This is the ID of the membership that the user or organization choose",
                        "type": "big integer",
                        "example": 8
                    },
                    "email_verified_at": {
                        "title": "Email verified at",
                        "description": "Email verified at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "rememberToken": {
                        "title": "Login Token",
                        "description": "The token optained when user logged in",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            }
        }
    },
    "tags": [
        {
            "name": "Liwach API",
            "description": "API Endpoints of Liwach"
        }
    ]
}