{
    "openapi": "3.0.0",
    "info": {
        "title": "API Documentation for LIWACH system",
        "description": "API Documentation for LIWACH system",
        "contact": {
            "email": "edenabdisa90@yahoo.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://liwachapi.herokuapp.com/api/",
            "description": "Demo API Server"
        }
    ],
    "paths": {
        "/media": {
            "get": {
                "tags": [
                    "Media"
                ],
                "summary": "Get list of media",
                "description": "Returns list of media",
                "operationId": "getProjectsList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Media"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "post": {
                "tags": [
                    "Media"
                ],
                "summary": "Store new Media",
                "description": "Returns Media data",
                "operationId": "storeMedia",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MediaRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Media"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/media/{id}": {
            "put": {
                "tags": [
                    "Media"
                ],
                "summary": "Update existing project",
                "description": "Returns updated media data",
                "operationId": "updateProject",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MediaRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Media"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Media"
                ],
                "summary": "Delete existing Media",
                "description": "Deletes a record and returns no content",
                "operationId": "deleteMedia",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Media id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            }
        },
        "/media/search": {
            "post": {
                "tags": [
                    "Media"
                ],
                "summary": "Get list of media",
                "description": "Returns list of media",
                "operationId": "searchMedia",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MediaRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Media"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/address": {
            "get": {
                "security":
                  {"access_token": []},
                "tags": [
                    "Address"
                ],
                "summary": "Get list of address",
                "description": "Returns list of address",
                "operationId": "getAddressList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "post": {
                "tags": [
                    "Address"
                ],
                "summary": "Store new Address",
                "description": "Returns Address data",
                "operationId": "storeAddress",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddressRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/address/{id}": {
            "put": {
                "tags": [
                    "Address"
                ],
                "summary": "Update existing address",
                "description": "Returns updated address data",
                "operationId": "updateAddress",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Address id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddressRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            }
        },
        "/address/search": {
            "post": {
                "tags": [
                    "Address"
                ],
                "summary": "Get list of address",
                "description": "Returns list of address",
                "operationId": "searchAddress",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Address"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/category": {
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Get list of category",
                "description": "Returns list of category",
                "operationId": "getCategoryList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "post": {
                "tags": [
                    "Category"
                ],
                "summary": "Store new Category",
                "description": "Returns Category data",
                "operationId": "storeCategory",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/category/{id}": {
            "put": {
                "tags": [
                    "Category"
                ],
                "summary": "Update existing category",
                "description": "Returns updated category data",
                "operationId": "updateCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Category id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Category"
                ],
                "summary": "Delete existing category",
                "description": "Deletes a record and returns no content",
                "operationId": "deleteProject",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            }
        },
        "/category/search": {
            "post": {
                "tags": [
                    "Category"
                ],
                "summary": "Get list of category",
                "description": "Returns list of category",
                "operationId": "searchCategory",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Category"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/flag": {
            "get": {
                "tags": [
                    "Flag"
                ],
                "summary": "Get list of flag",
                "description": "Returns list of flag",
                "operationId": "getProjectsList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flag"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "post": {
                "tags": [
                    "Flag"
                ],
                "summary": "Store new Flag",
                "description": "Returns Flag data",
                "operationId": "storeFlag",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FlagRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/flag/{id}": {
            "put": {
                "tags": [
                    "Flag"
                ],
                "summary": "Update existing project",
                "description": "Returns updated project data",
                "operationId": "updateProject",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FlagRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Flag"
                ],
                "summary": "Delete existing project",
                "description": "Deletes a record and returns no content",
                "operationId": "deleteProject",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            }
        },
        "/flag/countByDate/{attribute}": {
            "get": {
                "tags": [
                    "Flag"
                ],
                "summary": "Update existing project",
                "description": "Returns updated project data",
                "operationId": "updateProject",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type":[]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            }
        },
        "/flag/search": {
            "post": {
                "tags": [
                    "Flag"
                ],
                "summary": "Get list of flag",
                "description": "Returns list of flag",
                "operationId": "searchFlag",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flag"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/membership": {
            "get": {
                "tags": [
                    "Membership"
                ],
                "summary": "Get list of membership",
                "description": "Returns list of membership",
                "operationId": "getMembershipList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Membership"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "post": {
                "tags": [
                    "Membership"
                ],
                "summary": "Store new Membership",
                "description": "Returns Membership data",
                "operationId": "storeMembership",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MembershipRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Membership"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/membership/{id}": {
            "put": {
                "tags": [
                    "Membership"
                ],
                "summary": "Update existing project",
                "description": "Returns updated project data",
                "operationId": "updateMembership",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MembershipRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Membership"
                ],
                "summary": "Delete existing project",
                "description": "Deletes a record and returns no content",
                "operationId": "deleteProject",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            }
        },
        "/membership/search": {
            "post": {
                "tags": [
                    "Membership"
                ],
                "summary": "Get list of membership",
                "description": "Returns list of membership",
                "operationId": "searchMembership",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Membership"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Membership"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/message": {
            "get": {
                "tags": [
                    "Message"
                ],
                "summary": "Get list of message",
                "description": "Returns list of message",
                "operationId": "getMessageList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "post": {
                "tags": [
                    "Message"
                ],
                "summary": "Store new Message",
                "description": "Returns Message data",
                "operationId": "storeMessage",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/message/{id}": {
            "put": {
                "tags": [
                    "Message"
                ],
                "summary": "Update existing Message",
                "description": "Returns updated Message data",
                "operationId": "updateMessage",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Message"
                ],
                "summary": "Delete existing project",
                "description": "Deletes a record and returns no content",
                "operationId": "deleteProject",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            }
        },
        "/message/search": {
            "post": {
                "tags": [
                    "Message"
                ],
                "summary": "Get list of message",
                "description": "Returns list of message",
                "operationId": "searchMessage",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Message"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/reporttype": {
            "get": {
                "tags": [
                    "ReportType"
                ],
                "summary": "Get list of reporttype",
                "description": "Returns list of reporttype",
                "operationId": "getProjectsList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReportType"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "post": {
                "tags": [
                    "ReportType"
                ],
                "summary": "Store new ReportType",
                "description": "Returns ReportType data",
                "operationId": "storeReportType",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReportTypeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReportType"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/reporttype/{id}": {
            "put": {
                "tags": [
                    "ReportType"
                ],
                "summary": "Update existing ReportType",
                "description": "Returns updated ReportType data",
                "operationId": "updatePReportType",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ReportType id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReportTypeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReportType"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "ReportType"
                ],
                "summary": "Delete existing ReportType",
                "description": "Deletes a record and returns no content",
                "operationId": "deleteReportType",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ReportType id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            }
        },
        "/reporttype/search": {
            "post": {
                "tags": [
                    "ReportType"
                ],
                "summary": "Get list of reporttype",
                "description": "Returns list of reporttype",
                "operationId": "searchReportType",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReportType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReportType"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/request": {
            "get": {
                "tags": [
                    "Request"
                ],
                "summary": "Get list of request",
                "description": "Returns list of request",
                "operationId": "getProjectsList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "post": {
                "tags": [
                    "Request"
                ],
                "summary": "Store new Request",
                "description": "Returns Request data",
                "operationId": "storeRequest",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RequestRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Request"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/request/countByDate/{attribute}": {
            "get": {
                "tags": [
                    "Request"
                ],
                "summary": "Get list of request",
                "description": "Returns list of request",
                "operationId": "getProjectsList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": []
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/request/{id}": {
            "put": {
                "tags": [
                    "Request"
                ],
                "summary": "Update existing Request",
                "description": "Returns updated Request data",
                "operationId": "updateRequest",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Request id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RequestRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Request"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Request"
                ],
                "summary": "Delete existing Request",
                "description": "Deletes a record and returns no content",
                "operationId": "deleteRequest",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Request id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            }
        },
        
        "/request/search": {
            "post": {
                "tags": [
                    "Request"
                ],
                "summary": "Get list of request",
                "description": "Returns list of request",
                "operationId": "searchRequest",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Request"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Request"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/service": {
            "get": {
                "tags": [
                    "Service"
                ],
                "summary": "Get list of service",
                "description": "Returns list of service",
                "operationId": "getProjectsList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Service"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "post": {
                "tags": [
                    "Service"
                ],
                "summary": "Store new Service",
                "description": "Returns Service data",
                "operationId": "storeService",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Service"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Service"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/service/countByDate/{attribute}": {
            "get": {
                "tags": [
                    "Service"
                ],
                "summary": "Get list of service",
                "description": "Returns list of service",
                "operationId": "getProjectsList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": []
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/service/{id}": {
            "put": {
                "tags": [
                    "Service"
                ],
                "summary": "Update existing Service",
                "description": "Returns updated Service data",
                "operationId": "updateProject",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Service id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRequestUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Service"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Service"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Service"
                ],
                "summary": "Delete existing Service",
                "description": "Deletes a record and returns no content",
                "operationId": "deleteService",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Service id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            }
        },
        "/service/search": {
            "post": {
                "tags": [
                    "Service"
                ],
                "summary": "Get list of service",
                "description": "Returns list of service",
                "operationId": "searchService",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Service"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Service"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Service"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/service/byLocation": {
            "post": {
                "tags": [
                    "Service"
                ],
                "summary": "Get list of service",
                "description": "Returns list of service",
                "operationId": "searchByLocationService",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddressRequestCity"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Service"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Service"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/type": {
            "get": {
                "tags": [
                    "Type"
                ],
                "summary": "Get list of type",
                "description": "Returns list of type",
                "operationId": "getProjectsList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Type"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "post": {
                "tags": [
                    "Type"
                ],
                "summary": "Store new Type",
                "description": "Returns Type data",
                "operationId": "storeType",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Type"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Type"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/type/{id}": {
            "put": {
                "tags": [
                    "Type"
                ],
                "summary": "Update existing project",
                "description": "Returns updated project data",
                "operationId": "updateProject",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TypeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Type"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Type"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Type"
                ],
                "summary": "Delete existing type",
                "description": "Deletes a record and returns no content",
                "operationId": "deleteType",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Type id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            }
        },
        "/type/search": {
            "post": {
                "tags": [
                    "Type"
                ],
                "summary": "Get list of type",
                "description": "Returns list of type",
                "operationId": "searchType",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Type"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Type"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Type"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/serviceswaptype": {
            "get": {
                "tags": [
                    "ServiceSwapType"
                ],
                "summary": "Get list of serviceswaptype",
                "description": "Returns list of serviceswaptype",
                "operationId": "getserviceswaptypeList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceSwapType"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/itemswaptype": {
            "get": {
                "tags": [
                    "ItemSwapType"
                ],
                "summary": "Get list of itemswaptype",
                "description": "Returns list of itemswaptype",
                "operationId": "getitemswaptypeList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSwapType"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/item": {
            "get": {
                "tags": [
                    "Item"
                ],
                "summary": "Get list of Item",
                "description": "Returns list of Item",
                "operationId": "getItemList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Item"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "post": {
                "tags": [
                    "Item"
                ],
                "summary": "Store new Item",
                "description": "Returns Item data",
                "operationId": "storeItem",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Item"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/item/countByDate/{attribute}": {
            "get": {
                "tags": [
                    "Item"
                ],
                "summary": "Get list of Item",
                "description": "Returns list of Item",
                "operationId": "getItemList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": []
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/item/{id}": {
            "put": {
                "tags": [
                    "Item"
                ],
                "summary": "Update existing Item",
                "description": "Returns updated Item data",
                "operationId": "updateItem",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Item id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemRequestUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Item"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Item"
                ],
                "summary": "Delete existing Item",
                "description": "Deletes a record and returns no content",
                "operationId": "deleteItem",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Item id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            }
        },
        "/item/search": {
            "post": {
                "tags": [
                    "Item"
                ],
                "summary": "Get list of type",
                "description": "Returns list of type",
                "operationId": "searchType",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Item"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Item"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Type"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/item/byLocation": {
            "post": {
                "tags": [
                    "Item"
                ],
                "summary": "Get list of item",
                "description": "Returns list of item",
                "operationId": "searchItemsByLocation",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddressRequestCity"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Item"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Type"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/user": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get list of user",
                "description": "Returns list of user",
                "operationId": "getUsersList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Store new User",
                "description": "Returns User data",
                "operationId": "storeUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/user/countByDate/{attribute}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get list of user",
                "description": "Returns list of user",
                "operationId": "getUsersList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type":[]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/user/{id}": {
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update existing user",
                "description": "Returns updated user data",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Delete existing user",
                "description": "Deletes a record and returns no content",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            }
        },
        "/user/search": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Get list of user",
                "description": "Returns list of user",
                "operationId": "searchUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/user/logout": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Get list of user",
                "description": "Returns list of user",
                "operationId": "searchUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Get list of user",
                "description": "Returns list of user",
                "operationId": "searchUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserLogin"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        }
    },
    "components": {
"securitySchemes": {
			"access_token": {
				"type": "http",
				"description": "JWT security.",
				"scheme": "bearer",
				"bearerFormat": "JWT"
                ,"in":"header"
			}
		},
        "schemas": {
            "Address": {
                "title": "Address",
                "description": "Address model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "country": {
                        "title": "Country",
                        "description": "Country name",
                        "type": "string",
                        "example": "Ethiopia"
                    },
                    "city": {
                        "title": "City",
                        "description": "City name",
                        "type": "string",
                        "example": "Addis Ababa"
                    },
                    "latitude": {
                        "title": "Latitude",
                        "description": "Latitude",
                        "type": "double",
                        "example": "3.444"
                    },
                    "longitude": {
                        "title": "Longitude",
                        "description": "Longitude",
                        "type": "double",
                        "example": "3.444"
                    },
                    "type": {
                        "title": "Type",
                        "description": "What the address stands for",
                        "type": "string",
                        "example": "user, item, service"
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            },
            "AddressRequest": {
                "title": "Address",
                "description": "Address model",
                "properties": {
                    "country": {
                        "title": "Country",
                        "description": "Country name",
                        "type": "string",
                        "example": "Ethiopia"
                    },
                    "city": {
                        "title": "City",
                        "description": "City name",
                        "type": "string",
                        "example": "Addis Ababa"
                    },                    
                    "latitude": {
                        "title": "Latitude",
                        "description": "Latitude",
                        "type": "double",
                        "example": "3.444"
                    },
                    "longitude": {
                        "title": "Longitude",
                        "description": "Longitude",
                        "type": "double",
                        "example": "3.444"
                    },
                    "type": {
                        "title": "Type",
                        "description": "What the address stands for",
                        "type": "string",
                        "example": "user, item, service"
                    }
                }
            },
            "AddressRequestCity": {
                "title": "Address",
                "description": "Address model",
                "properties": {
                    "city": {
                        "title": "City",
                        "description": "City name",
                        "type": "string",
                        "example": "Addis Ababa"
                    }
                }
            },
            "Category": {
                "title": "Category",
                "description": "Category model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "title": "Category name",
                        "description": "Category name",
                        "type": "string",
                        "example": "Garments, Mens"
                    },                    
                    "status": {
                        "title": "Status",
                        "description": "The status of the category data",
                        "type": "string",
                        "example": "deleted ot active"
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Category"
                }
            },
            "CategoryRequest": {
                "title": "Category",
                "description": "Category model",
                "properties": {
                    "name": {
                        "title": "Category name",
                        "description": "Category name",
                        "type": "string",
                        "example": "Garments"
                    },                  
                    "status": {
                        "title": "Status",
                        "description": "The status of the category data",
                        "type": "string",
                        "example": "deleted ot active"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Category"
                }
            },
            "Flag": {
                "title": "Flag",
                "description": "Flag items",
                "required": [
                    "name"
                ],
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "reason": {
                        "title": "Reason",
                        "description": "Report name fetched from report type",
                        "type": "string",
                        "example": "Fake Item"
                    },
                    "flagged_item_id": {
                        "title": "Flagged Item Id",
                        "description": "The Id of the item that was flagged",
                        "type": "big integer",
                        "example": 2
                    },
                    "flagged_by_id": {
                        "title": "Flagged by Id",
                        "description": "The Id of the user that flagged the item",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "type": {
                        "title": "Type",
                        "description": "Is the flagged item service or item it will make it easier for the backend to choose which table to query",
                        "type": "string",
                        "example": "item or service"
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            },
            "FlagRequest": {
                "title": "Flag",
                "description": "Flag items",
                "required": [
                    "name"
                ],
                "properties": {
                    "reason": {
                        "title": "Reason",
                        "description": "Report name fetched from report type",
                        "type": "string",
                        "example": "Fake Item"
                    },
                    "flagged_item_id": {
                        "title": "Flagged Item Id",
                        "description": "The Id of the item that was flagged",
                        "type": "big integer",
                        "example": 2
                    },
                    "flagged_by_id": {
                        "title": "Flagged by Id",
                        "description": "The Id of the user that flagged the item",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "type": {
                        "title": "Type",
                        "description": "Is the flagged item service or item it will make it easier for the backend to choose which table to query",
                        "type": "string",
                        "example": "item or service"
                    }
                }
            },
            "ItemRequest": {
                "title": "Item",
                "description": "Item model ",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "title": "Name",
                        "description": "Name of the item",
                        "type": "string",
                        "example": "car"
                    },
                    "description": {
                        "title": "Description",
                        "description": "Description of the item",
                        "type": "string",
                        "example": "Car is machine used to...."
                    },
                    "media": {
                        "title": "Media",
                        "description": "List containing the name of the types",
                        "type": "List",
                        "format": "List",
                        "example": [
                            "url link",
                            "url link"
                        ]
                    },
                    "swap_type": {
                        "title": "Swap Types",
                        "description": "List containing the id of the types",
                        "type": "List",
                        "format": "List",
                        "example": [
                            1,
                            3,
                            2,
                            4
                        ]
                    },
                    "address": {
                        "$ref": "#/components/schemas/AddressRequest"
                    },
                    "type_id": {
                        "title": "Type",
                        "description": "Categorize the item into a type and from this type we can decide the category",
                        "type": "big integer",
                        "format": "string",
                        "example": 4
                    },
                    "user_id": {
                        "title": "User",
                        "description": "The id of the owner",
                        "type": "big integer",
                        "format": "string",
                        "example": 4
                    },
                    "status": {
                        "title": "status",
                        "description": "Status of the item whether it is bartered,unbartered,blocked. Automatically all user item are set to unbartered but company is set to blocked",
                        "type": "string",
                        "example": "bartered,unbartered,blocked"
                    }
                }
            },
            "ItemRequestUpdate": {
                "title": "Item",
                "description": "Item model ",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "title": "Name",
                        "description": "Name of the item",
                        "type": "string",
                        "example": "car"
                    },
                    "description": {
                        "title": "Description",
                        "description": "Description of the item",
                        "type": "string",
                        "example": "Car is machine used to...."
                    },
                    "media": {
                        "title": "Media",
                        "description": "List containing the name of the types",
                        "type": "List",
                        "format": "List",
                        "example": [
                            {"id":8,"url":"url link"},
                            {"id":4,"url":"url link"}
                        ]
                    },
                    "swap_type": {
                        "title": "Swap Types",
                        "description": "List containing the id of the types",
                        "type": "List",
                        "format": "List",
                        "example": {
                            "removed":[2,6],
                            "added":[6,7]
                        }
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "type_id": {
                        "title": "Type",
                        "description": "Categorize the item into a type and from this type we can decide the category",
                        "type": "big integer",
                        "format": "string",
                        "example": 4
                    },
                    "user_id": {
                        "title": "User",
                        "description": "The id of the owner",
                        "type": "big integer",
                        "format": "string",
                        "example": 4
                    },
                    "status": {
                        "title": "status",
                        "description": "Status of the item whether it is bartered,unbartered,blocked. Automatically all user item are set to unbartered but company is set to blocked",
                        "type": "string",
                        "example": "bartered,unbartered,blocked"
                    }
                }
            },
            "Item": {
                "title": "Item",
                "description": "Item model ",
                "required": [
                    "name"
                ],
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "media": {
                        "title": "Media",
                        "description": "List containing the name of the types",
                        "type": "List",
                        "format": "List",
                        "example": [
                            "url link",
                            "url link"
                        ]
                    },
                    "status": {
                        "title": "status",
                        "description": "Status of the item whether it is bartered,unbartered,blocked. Automatically all user item are set to unbartered but company is set to blocked",
                        "type": "string",
                        "example": "bartered,unbartered,blocked"
                    },
                    "number_of_flag": {
                        "title": "Number of Flag",
                        "description": "Keeps count of the flag that this item recieved",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "number_of_request": {
                        "title": "Number of request",
                        "description": "Keeps count of the request that this item recieved",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "address": {
                        "$ref": "#/components/schemas/AddressRequest"
                    },
                    "bartering_location_id": {
                        "title": "Bartering location",
                        "description": "After saving the location at address the id will be assocated with this item",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "swap_type": {
                        "title": "Swap Types",
                        "description": "List containing the name of the types",
                        "type": "List",
                        "format": "List",
                        "example": [
                            "food",
                            "mobile"
                        ]
                    },
                    "type_id": {
                        "title": "Type",
                        "description": "Categorize the item into a type and from this type we can decide the category",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "user_id": {
                        "title": "User",
                        "description": "The id of the owner",
                        "type": "big integer",
                        "format": "string",
                        "example": 4
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            },
            "Membership": {
                "title": "Membership",
                "description": "Membership model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "title": "Name",
                        "description": "Name of the membership",
                        "type": "string",
                        "example": "normal,premium,gold"
                    },
                    "limit_of_post": {
                        "title": "Limit of post",
                        "description": "Limit of post that this memebrship is allowed",
                        "type": "integer",
                        "example": 100
                    },                  
                    "status": {
                        "title": "Status",
                        "description": "The status of the membership data",
                        "type": "string",
                        "example": "deleted or active"
                    },
                    "transaction_limit": {
                        "title": "Transation Limit",
                        "description": "Transation Limit in a day or in a week",
                        "type": "integer",
                        "example": 6
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            },
            "MembershipRequest": {
                "title": "Membership",
                "description": "Membership model",
                "properties": {
                    "name": {
                        "title": "Name",
                        "description": "Name of the membership",
                        "type": "string",
                        "example": "normal,premium,gold"
                    },
                    "status": {
                        "title": "Status",
                        "description": "The status of the membership data",
                        "type": "string",
                        "example": "deleted or active"
                    },
                    "limit_of_post": {
                        "title": "Limit of post",
                        "description": "Limit of post that this memebrship is allowed",
                        "type": "integer",
                        "example": 100
                    },
                    "transaction_limit": {
                        "title": "Transation Limit",
                        "description": "Transation Limit in a day or in a week",
                        "type": "integer",
                        "example": 6
                    }
                }
            },
            "Message": {
                "title": "Messages",
                "description": "Message model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "content": {
                        "title": "Text Content",
                        "description": "The text message",
                        "type": "string",
                        "example": "Hello, I want this item"
                    },
                    "type": {
                        "title": "Type",
                        "description": "It identified if the content is text or an image path",
                        "type": "string",
                        "example": "text or picture"
                    },
                    "chat_id": {
                        "title": "Chat Id",
                        "description": "The token gotten when the item was requested. Identifies the chat ID(token in company case) two user may have many chat id if they are bartering many item between them",
                        "type": "string",
                        "example": "randomcreateduniquetoken"
                    },
                    "sender_id": {
                        "title": "Sender user id",
                        "description": "Sender user id",
                        "type": "big integer",
                        "example": 4
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            },
            "MessageRequest": {
                "title": "Messages",
                "description": "Message model",
                "properties": {
                    "content": {
                        "title": "Text Content",
                        "description": "The text message",
                        "type": "string",
                        "example": "Hello, I want this item"
                    },
                    "type": {
                        "title": "Type",
                        "description": "It identified if the content is text or an image path",
                        "type": "string",
                        "example": "text or picture"
                    },
                    "chat_id": {
                        "title": "Chat Id",
                        "description": "The token gotten when the item was requested. Identifies the chat ID(token in company case) two user may have many chat id if they are bartering many item between them",
                        "type": "string",
                        "example": "randomcreateduniquetoken"
                    },
                    "sender_id": {
                        "title": "Sender user id",
                        "description": "Sender user id",
                        "type": "big integer",
                        "example": 4
                    }
                }
            },
            "ReportType": {
                "title": "ReportType",
                "description": "Report type model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "report_detail": {
                        "title": "Name",
                        "description": "Small text that will be displayed to user so that they can choose from the list",
                        "type": "string",
                        "example": "Spam, Fake Item, Violence, Child Abuse, Other, "
                    },
                    "status": {
                        "title": "Status",
                        "description": "The status of the Report type data",
                        "type": "string",
                        "example": "deleted or active"
                    },
                    "type_for": {
                        "title": "Type for",
                        "description": "The item that this report can be associated with",
                        "type": "string",
                        "example": "item or service or user"
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            },
            "ReportTypeRequest": {
                "title": "ReportType",
                "description": "Report type model",
                "properties": {
                    "report_detail": {
                        "title": "Name",
                        "description": "Small text that will be displayed to user so that they can choose from the list",
                        "type": "string",
                        "example": "Spam, Fake Item, Violence, Child Abuse, Other, "
                    },
                    "status": {
                        "title": "Status",
                        "description": "The status of the Report type data",
                        "type": "string",
                        "example": "deleted or active"
                    },
                    "type_for": {
                        "title": "Type for",
                        "description": "The item that this report can be associated with",
                        "type": "string",
                        "example": "item or service or user"
                    }
                }
            },
            "Request": {
                "title": "Request",
                "description": "Request model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "status": {
                        "title": "Status",
                        "description": "Whether the user has accepted it or not",
                        "type": "string",
                        "example": "accepted or declined or expired"
                    },
                    "requester_id": {
                        "title": "Requester User Id",
                        "description": "The ID of the person who requested for the item",
                        "type": "integer",
                        "example": 4
                    },
                    "requested_item_id": {
                        "title": "Requested Item Id",
                        "description": "The ID of the Item that we wanted",
                        "type": "integer",
                        "example": 7
                    },
                    "requester_item_id": {
                        "title": "Requester Item Id",
                        "description": "The ID of the Item that we are offering",
                        "type": "integer",
                        "example": "2020-01-27 17:50:45"
                    },
                    "rating": {
                        "title": "Rating",
                        "description": "The rating given by the user after the status is changed to barter",
                        "type": "integer",
                        "example": 2
                    },
                    "token": {
                        "title": "Token",
                        "description": "A unique generated token that will be accessed by chat_id in case of user to user barter and can be used as ticket for organization.",
                        "type": "string",
                        "example": "srrwgwrgt"
                    },
                    "type": {
                        "title": "type",
                        "description": "Type of items that are being exchanged. This will make it easy to decide on which table to query,",
                        "type": "string",
                        "example": "item or service"
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            },
            "RequestRequest": {
                "title": "Request",
                "description": "Request model",
                "properties": {
                    "status": {
                        "title": "Status",
                        "description": "Whether the user has accepted it or not",
                        "type": "string",
                        "example": "accepted or declined or expired"
                    },
                    "requester_id": {
                        "title": "Requester User Id",
                        "description": "The ID of the person who requested for the item",
                        "type": "integer",
                        "example": 4
                    },
                    "requested_item_id": {
                        "title": "Requested Item Id",
                        "description": "The ID of the Item that we wanted",
                        "type": "integer",
                        "example": 7
                    },
                    "requester_item_id": {
                        "title": "Requester Item Id",
                        "description": "The ID of the Item that we are offering",
                        "type": "integer",
                        "example": "2020-01-27 17:50:45"
                    },
                    "rating": {
                        "title": "Rating",
                        "description": "The rating given by the user after the status is changed to barter",
                        "type": "integer",
                        "example": 2
                    },
                    "token": {
                        "title": "Token",
                        "description": "A unique generated token that will be accessed by chat_id in case of user to user barter and can be used as ticket for organization.",
                        "type": "string",
                        "example": "srrwgwrgt"
                    },
                    "type": {
                        "title": "type",
                        "description": "Type of items that are being exchanged. This will make it easy to decide on which table to query,",
                        "type": "string",
                        "example": "item"
                    }
                }
            },
            "Service": {
                "title": "Service",
                "description": "Service model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "title": "Name",
                        "description": "Name of the service",
                        "type": "string",
                        "example": "Plumbering"
                    },
                    "media": {
                        "title": "Media",
                        "description": "List containing the url",
                        "type": "List",
                        "format": "List",
                        "example": [
                            "url link",
                            "url link"
                        ]
                    },
                    "status": {
                        "title": "Status",
                        "description": "Describes if the service is bartred and open",
                        "type": "string",
                        "example": "bartered or bartered or blocked"
                    },
                    "description": {
                        "title": "Description",
                        "description": "Description of the service",
                        "type": "string",
                        "example": "Plumbering is a work"
                    },
                    "number_of_flag": {
                        "title": "Number of Flag",
                        "description": "Keeps count of the flag that this service recieved",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "number_of_request": {
                        "title": "Number of request",
                        "description": "Keeps count of the request that this service recieved",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "address": {
                        "$ref": "#/components/schemas/AddressRequest"
                    },
                    "bartering_location_id": {
                        "title": "Bartering location",
                        "description": "After saving the location at address the id will be assocated with this service",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "type_id": {
                        "title": "Type",
                        "description": "Categorize the service into a type and from this type we can decide the category",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "user_id": {
                        "title": "User",
                        "description": "The user that uploaded the service.",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "swap_type": {
                        "title": "Swap Types",
                        "description": "List containing the name of the types",
                        "type": "List",
                        "format": "List",
                        "example": [
                            "driver"
                        ]
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Project"
                }
            },
            "ServiceRequest": {
                "title": "Service",
                "description": "Service model",
                "properties": {
                    "name": {
                        "title": "Name",
                        "description": "Name of the service",
                        "type": "string",
                        "example": "Plumbering"
                    },
                    "description": {
                        "title": "Description",
                        "description": "Description of the service",
                        "type": "string",
                        "example": "Plumbering is type of service that...."
                    },
                    "media": {
                        "title": "Media",
                        "description": "List containing the name of the types",
                        "type": "List",
                        "format": "List",
                        "example": [
                            "url link",
                            "url link"
                        ]
                    },
                    "address": {
                        "$ref": "#/components/schemas/AddressRequest"
                    },
                    "type_id": {
                        "title": "Type",
                        "description": "Categorize the service into a type and from this type we can decide the category",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "user_id": {
                        "title": "User",
                        "description": "The user that uploaded the service.",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "swap_type": {
                        "title": "Swap Types",
                        "description": "List containing the id of the types",
                        "type": "List",
                        "format": "List",
                        "example": [
                            1,
                            2,
                            3,
                            4
                        ]
                    },
                    "status": {
                        "title": "status",
                        "description": "Status of the service whether it is bartered,unbartered,blocked. Automatically all user item are set to unbartered but company is set to blocked",
                        "type": "string",
                        "example": "bartered,unbartered,blocked"
                    }
                }
            },
            "ServiceRequestUpdate": {
                "title": "Service",
                "description": "Service model",
                "properties": {
                    "name": {
                        "title": "Name",
                        "description": "Name of the service",
                        "type": "string",
                        "example": "Plumbering"
                    },
                    "description": {
                        "title": "Description",
                        "description": "Description of the service",
                        "type": "string",
                        "example": "Plumbering is type of service that...."
                    },
                    "media": {
                        "title": "Media",
                        "description": "List containing the name of the types",
                        "type": "List",
                        "format": "List",
                        "example": [
                            {"id":8,"url":"url link"},
                            {"id":4,"url":"url link"}
                        ]
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "type_id": {
                        "title": "Type",
                        "description": "Categorize the service into a type and from this type we can decide the category",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },                    
                    "user_id": {
                        "title": "User",
                        "description": "The user that uploaded the service.",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "swap_type": {
                        "title": "Swap Types",
                        "description": "List containing the id of the types",
                        "type": "List",
                        "format": "List",
                        "example": {
                            "removed":[2,6],
                            "added":[6,7]
                        }
                    },
                    "status": {
                        "title": "status",
                        "description": "Status of the service whether it is bartered,unbartered,blocked. Automatically all user item are set to unbartered but company is set to blocked",
                        "type": "string",
                        "example": "bartered,unbartered,blocked"
                    }
                }
            },
            "Type": {
                "title": "Type",
                "description": "Type model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "title": "Name",
                        "description": "Name of the new project",
                        "type": "string",
                        "example": "A nice project"
                    },
                    "status": {
                        "title": "Status",
                        "description": "Describes if the type data is deleted ,active",
                        "type": "string",
                        "example": "deleted ,active"
                    },
                    "category_id": {
                        "title": "Category ID",
                        "description": "This type is under a certain category.",
                        "type": "big integer",
                        "example": 123
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            },
            "TypeRequest": {
                "title": "Type",
                "description": "Type model",
                "properties": {
                    "name": {
                        "title": "Name",
                        "description": "Name of the new project",
                        "type": "string",
                        "example": "A nice project"
                    },
                    "category_id": {
                        "title": "Category ID",
                        "description": "This type is under a certain category.",
                        "type": "big integer",
                        "example": 123
                    },
                    "status": {
                        "title": "Status",
                        "description": "Describes if the type data is deleted ,active",
                        "type": "string",
                        "example": "deleted ,active"
                    }
                }
            },
            "Media": {
                "title": "Media",
                "description": "Media model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "item_id": {
                        "title": "item_id",
                        "description": "Name of the new project",
                        "type": "big integer",
                        "format": "int64",
                        "example": 9
                    },
                    "type": {
                        "title": "Type",
                        "description": "This is the type.",
                        "type": "big integer",
                        "example": "item,service,user"
                    },
                    "url": {
                        "title": "Url",
                        "description": "Describes if the type data is deleted ,active",
                        "type": "string",
                        "example": "link.com"
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            },
            "MediaRequest": {
                "title": "Media",
                "description": "Media model",
                "properties": {
                    "item_id": {
                        "title": "item_id",
                        "description": "Name of the new project",
                        "type": "big integer",
                        "example": 9
                    },
                    "type": {
                        "title": "Type",
                        "description": "This is the type.",
                        "type": "big integer",
                        "example": "item,service,user"
                    },
                    "url": {
                        "title": "Url",
                        "description": "Describes if the type data is deleted ,active",
                        "type": "string",
                        "example": "link.com"
                    }
                }
            },
            "User": {
                "title": "User",
                "description": "User model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "first_name": {
                        "title": "Last Name",
                        "description": "The first Name",
                        "type": "string",
                        "example": "Eden "
                    },
                    "last_name": {
                        "title": "Last Name",
                        "description": "The last Name",
                        "type": "string",
                        "example": "Abdisa "
                    },
                    "email": {
                        "title": "Email",
                        "description": "Email",
                        "type": "string",
                        "format": "eden@yahoo.com"
                    },
                    "profile_picture": {
                        "title": "Picture file name",
                        "description": "This name will be concated with the image collection folder",
                        "type": "string",
                        "example": "myprofile.jpg"
                    },
                    "phone_number": {
                        "title": "Phone Number",
                        "description": "Phone number including country/city code",
                        "type": "string",
                        "example": "+2519443322"
                    },
                    "TIN_picture": {
                        "title": "Picture file name",
                        "description": "This name will be concated with the image collection folder and the tin number will be viewed by the admin to approve the user",
                        "type": "string",
                        "example": "mytin.jpg"
                    },
                    "status": {
                        "title": "Status",
                        "description": "The user is active at first for user and blocked for company",
                        "type": "string",
                        "example": "active or blocked"
                    },
                    "birthdate": {
                        "title": "Birthdate",
                        "description": "The birthdate of the user",
                        "type": "string",
                        "format": "date",
                        "example": "2020-01-27"
                    },
                    "type": {
                        "title": "Type of user",
                        "description": "This identify the account whether it is an organizations or a user or admin",
                        "type": "string",
                        "example": "user or admin or company"
                    },
                    "address": {
                        "$ref": "#/components/schemas/AddressRequest"
                    },
                    "membership_id": {
                        "title": "Membership ID ",
                        "description": "This is the ID of the membership that the user or organization choose",
                        "type": "big integer",
                        "example": 8
                    },
                    "email_verified_at": {
                        "title": "Email verified at",
                        "description": "Email verified at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            },
            "UserLogin": {
                "title": "User",
                "description": "User model",
                "properties": {
                    "email": {
                        "title": "Email",
                        "description": "Email",
                        "type": "string",
                        "format": "eden@yahoo.com"
                    },
                    "password": {
                        "title": "Signup password",
                        "description": "The user password",
                        "type": "string",
                        "example": "passs"
                    }
                }
            },
            "UserRequest": {
                "title": "User",
                "description": "User model",
                "properties": {
                    "first_name": {
                        "title": "Last Name",
                        "description": "The first Name",
                        "type": "string",
                        "example": "Eden "
                    },
                    "last_name": {
                        "title": "Last Name",
                        "description": "The last Name",
                        "type": "string",
                        "example": "Abdisa "
                    },
                    "email": {
                        "title": "Email",
                        "description": "Email",
                        "type": "string",
                        "format": "eden@yahoo.com"
                    },
                    "password": {
                        "title": "Signup password",
                        "description": "The user password",
                        "type": "string",
                        "example": "passs"
                    },
                    "profile_picture": {
                        "title": "Picture file name",
                        "description": "This name will be concated with the image collection folder",
                        "type": "string",
                        "example": "myprofile.jpg"
                    },
                    "phone_number": {
                        "title": "Phone Number",
                        "description": "Phone number including country/city code",
                        "type": "string",
                        "example": "+2519443322"
                    },
                    "TIN_picture": {
                        "title": "Picture file name",
                        "description": "This name will be concated with the image collection folder and the tin number will be viewed by the admin to approve the user",
                        "type": "string",
                        "example": "mytin.jpg"
                    },
                    "status": {
                        "title": "Status",
                        "description": "The user is active at first for user and blocked for company",
                        "type": "string",
                        "example": "active or blocked"
                    },
                    "birthdate": {
                        "title": "Birthdate",
                        "description": "The birthdate of the user",
                        "type": "string",
                        "format": "date",
                        "example": "2020-01-27"
                    },
                    "type": {
                        "title": "Type of user",
                        "description": "This identify the account whether it is an organizations or a user or admin",
                        "type": "string",
                        "example": "user or admin or company"
                    },
                    "address": {
                        "$ref": "#/components/schemas/AddressRequest"
                    },
                    "membership_id": {
                        "title": "Membership ID ",
                        "description": "This is the ID of the membership that the user or organization choose",
                        "type": "big integer",
                        "example": 8
                    }
                }
            },
            "Subscription": {
                "title": "Subscription",
                "description": "Subscription model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "big integer",
                        "format": "int64",
                        "example": 1
                    },
                    "type_id": {
                        "title": "Type ID",
                        "description": "This is the type that the user subscribed for ",
                        "type": "integer",
                        "example": 3
                    },
                    "user_id": {
                        "title": "User ID",
                        "description": "The user Id",
                        "type": "big integer",
                        "example": 99
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "description": "This is the timestamp that we got when this data is added.",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                }
            },
            "SubscriptionRequest": {
                "title": "Subscription",
                "description": "Subscription model",
                "properties": {
                    "type_id": {
                        "title": "Type ID",
                        "description": "This is the type that the user subscribed for ",
                        "type": "integer",
                        "example": 3
                    },
                    "user_id": {
                        "title": "User ID",
                        "description": "The user Id",
                        "type": "big integer",
                        "example": 99
                    }
                }
            },
            "ItemSwapType": {
                "title": "ItemSwapType",
                "description": "ItemSwapType model",
                "properties": {
                    "type_id": {
                        "title": "Item ID",
                        "description": "This is the item that the user wanted to barter with",
                        "type": "integer",
                        "example": 3
                    },
                    "item_id": {
                        "title": "Item ID",
                        "description": "The service Id",
                        "type": "big integer",
                        "example": 99
                    }
                }
            },
            "ServiceSwapType": {
                "title": "ServiceSwapType",
                "description": "ServiceSwapType model",
                "properties": {
                    "type_id": {
                        "title": "Service ID",
                        "description": "This is the service that the user wanted to barter with",
                        "type": "integer",
                        "example": 3
                    },
                    "service_id": {
                        "title": "Service ID",
                        "description": "The service Id",
                        "type": "big integer",
                        "example": 99
                    }
                }
            }
        }
    }
}